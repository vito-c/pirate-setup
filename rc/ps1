#!/usr/bin/env bash

export NBS="$(printf '\u00a0')"
export PS1_SEP="ÓÉÄ "

###############################################################################
# Draws a gradient with text overlay (text over color is automatic)
# ARGUMENTS:
#   1. Start Color in "R;G;B" format ie: Red = "255;0;0"
#   2. End Color in "R;G;B" format ie: Red = "255;0;0"
#   3. Text the text to overlay on the gradient
#   4. Percent of text to cover with gradient
# OUTPUTS:
#   Writes a String to stdout with a gradient background
# RETURN:
#   0 if print succeeds, non-zero on error.
###############################################################################
function gradient() {
    # inputs
    local start=$([ -z "${1+x}" ] && echo "255;0;0" || echo $1)
    local end=$([ -z "${2+x}" ] && echo "0;0;255" || echo $2)
    local text=$([ -z "${3+x}" ] && echo "\\t" || echo $3)
    local perc=$([ -z "${4+x}" ] && echo "100" || echo $4)

    # input text number of characters
    local tcol=$(echo $text | wc -c)

    # start RGB codes
    local sr=$(echo $start | awk -F";" '{print $1}')
    local sg=$(echo $start | awk -F";" '{print $2}')
    local sb=$(echo $start | awk -F";" '{print $3}')

    # end RGB codes
    local er=$(echo $end | awk -F";" '{print $1}')
    local eg=$(echo $end | awk -F";" '{print $2}')
    local eb=$(echo $end | awk -F";" '{print $3}')

    # the meat
    gawk -v term_cols="${tcol}" -v txt="${text}" -v p="${perc}" \
        -v r="${sr}" -v g="${sg}" -v b="${sb}" \
        -v re="${er}" -v ge="${eg}" -v be="${eb}" \
    'BEGIN {

    ri = (p == 0)? re : 100*(re - r)/(p*term_cols);
    gi = (p == 0)? ge : 100*(ge - g)/(p*term_cols);
    bi = (p == 0)? be : 100*(be - b)/(p*term_cols);

    for (colnum = 1; colnum<term_cols; colnum++) {
        s = substr(txt, colnum,1);
        r = (r + ri >= re && ri > 0 || r + ri <= re && ri < 0)? re : r + ri;
        g = (g + gi >= ge && gi > 0 || g + gi <= ge && gi < 0)? ge : g + gi;
        b = (b + bi >= be && bi > 0 || b + bi <= be && bi < 0)? be : b + bi;
        printf "\033[48;2;%d;%d;%dm", r,g,b;
        printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
        printf "%s\033[0m", s;
    }
    printf "\n";
}'
}

function dump_colors() {
    awk -v term_cols="${width:-$(tput cols || echo 80)}" 'BEGIN{
    s="/\\";
    for (colnum = 0; colnum<term_cols; colnum++) {
        r = 255-(colnum*255/term_cols);
        g = (colnum*510/term_cols);
        b = (colnum*255/term_cols);
        if (g>255) g = 510-g;
        printf "\033[48;2;%d;%d;%dm", r,g,b;
        printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
        printf "%s\033[0m", substr(s,colnum%2+1,1);
    }
    printf "\n";
}'
}

function ps1_start() {
    # "77;77;77" "77;77;255"
    [[ -z "${1+x}" ]] && local scbg="77;77;77"  || local scbg="$1"
    [[ -z "${2+x}" ]] && local ecbg="77;77;255" || local ecbg="$2"
    [[ -z "${3+x}" ]] && local ncbg="30;50;30"  || local ncbg="$3"
    [[ -z "${4+x}" ]] && local itxt="$OS_ICON xx" || local itxt="$4"
    local itxt="${OS_ICON}${NBS}${NBS}${itxt}"

    local tcfg="255;0;0"
    local otxt=$(gradient "${scbg}" "${ecbg}" "${itxt}" "50")
    # printf "\n\e[38;2;${scbg}mÓÇ≤\e[48;2;${scbg}m \e[0m%s\e[48;2;${ecbg}m\e[38;2;${ecbg}m \e[48;2;${ncbg}m${PS1_SEP}\e[0m" "${otxt}"
    # \n\[\33[47m\]
    echo -e "\033[38;2;${scbg}m\033[48;2;${scbg}m \033[0m${otxt}\033[48;2;${ecbg}m\033[38;2;${ecbg}m \033[48;2;${ncbg}m${PS1_SEP}\033[0m"
}

function ps1_jobs() {
    [[ -z "${1+x}" ]] && local scbg="30;50;30"  || local scbg="$1"
    [[ -z "${2+x}" ]] && local ecbg="98;206;80" || local ecbg="$2"
    [[ -z "${3+x}" ]] && local ncbg="255;0;0"   || local ncbg="$3"
    [[ -z "${4+x}" ]] && local itxt="üèÉ x"     || local itxt="$4"
    local otxt=$(gradient "${scbg}" "${ecbg}" " ${itxt} " "0")

    printf "\e[38;2;${scbg}m\e[48;2;${scbg}m \e[0m%s\e[48;2;${ecbg}m\e[38;2;${ecbg}m \e[48;2;${ncbg}m${PS1_SEP}\e[0m" "${otxt}"
}

function ps1_mid() {
    #115,174,233
    [[ -z "${1+x}" ]] && local scbg="30;50;30"  || local scbg="$1"
    [[ -z "${2+x}" ]] && local ecbg="98;206;80" || local ecbg="$2"
    [[ -z "${3+x}" ]] && local ncbg="255;0;0"   || local ncbg="$3"
    [[ -z "${4+x}" ]] && local itxt=" xx"   || local itxt="$4"
    local tcfg="255;0;0"

    local otxt=$(gradient "${scbg}" "${ecbg}" " ${itxt} " "30")
    printf "\e[38;2;${scbg}m\e[48;2;${scbg}m \e[0m%s\e[48;2;${ecbg}m\e[38;2;${ecbg}m \e[48;2;${ncbg}m${PS1_SEP}\e[0m" "${otxt}"
}

function ps1_beforelast() {
    #115,174,233
    [[ -z "${1+x}" ]] && local scbg="30;50;30"  || local scbg="$1"
    [[ -z "${2+x}" ]] && local ecbg="98;206;80" || local ecbg="$2"
    [[ -z "${3+x}" ]] && local ncbg="255;0;0"   || local ncbg="$3"
    [[ -z "${4+x}" ]] && local itxt=" xx"       || local itxt="$4"
    local tcfg="255;0;0"

    itxt="${itxt}${NBS}"
    while (( ${#itxt} < 4 )); do
        itxt="${itxt}${NBS}"
    done
        
    local otxt=$(gradient "${scbg}" "${ecbg}" " ${itxt} " "30")
    printf "\e[0m\e[38;2;${scbg}m\e[48;2;${scbg}m \e[0m%s\e[48;2;${ecbg}m\e[38;2;${ecbg}m \e[0m\n" "${otxt}"
}

function ps1_git() {
    [[ -z "${1+x}" ]] && local scbg="30;50;30"  || local scbg="$1"
    [[ -z "${2+x}" ]] && local ecbg="98;206;80" || local ecbg="$2"
    [[ -z "${3+x}" ]] && local ocbg="255;0;0"   || local ocbg="$3"
    [[ -z "${4+x}" ]] && local itxt="master"    || local itxt="$4"

    local tcfg="255;0;0"
    # $( git branch 2>/dev/null | grep '^*' | colrm 1 2)

    if [[ ${itxt} == "" ]]; then
      printf "\e[0m\e[38;2;${ocbg}m${PS1_SEP}\e[0m"
    else 
      local otxt=$(gradient "${scbg}" "${ecbg}" "Ôêò ${itxt} " "50")
      printf "\e[38;2;${ocbg}m\e[48;2;${scbg}m${PS1_SEP}\e[38;2;${scbg}m \e[0m%s\e[48;2;${ecbg}m\e[38;2;${ecbg}m \e[0m\e[38;2;${ecbg}m${PS1_SEP}\e[0m\n" "${otxt}"
    fi
}

if [[ $HOSTNAME == "dorker" ]]; then
    # export PS1="\[\e[36;1m\][\A] \[\e[31;1m\]\w> \[\e[0m\]"
    # export PS2="\[\e[31;1m\]> \[\e[0m\]"
    echo "WELCOME TO DOCKER"
    export OS_ICON=üê≥
    export PS1="\t \j \\w\$(git branch 2>/dev/null | grep '^*'| colrm 1 2)\\n> "
    # export PS1_ORIG="\n \[\033[41m\]\[\033[0;31m\]ÓÇ≤\[\033[0;37m\]\[\033[41m\] $OS_ICON \A \[\033[0m\]\[\033[0;31m\]\[\033[44m\]${PS1_SEP}\[\033[0;34m\]\[\033[44m\]\[\033[0;30m\]\[\033[44m\] \w \[\033[0m\]\[\033[0;34m\]${PS1_SEP} \n \[\033[0;34m\]‚ï∞Ôë† \[\033[1;36m\]\$ \[\033[0m\]"
    export PS1="\n\[\033[47m\]\[\033[0;37m\]ÓÇ≤\[\033[0;30m\]\[\033[47m\] üê≥ \A \[\033[0m\]\[\033[0;37m\]\[\033[44m\]${PS1_SEP}\[\033[0;34m\]\[\033[44m\]\[\033[1;37m\]\[\033[44m\] \j \[\033[0m\]\[\033[0;34m\]${PS1_SEP} \n\[\033[1;35m\]$ \[\033[0m\]"
    export PS1='$(ps1_start "77;77;77" "33;33;255" "77;77;77" "$OS_ICON \t")$(ps1_jobs "77;77;77" "77;77;77" "33;33;255" "üèÉ \j")$(ps1_beforelast "33;33;255" "77;77;77" "255;0;0"  "\w")$(ps1_git "33;33;255" "77;77;77" "77;77;77" "$(echo $(git branch 2>/dev/null | grep '^*' | colrm 1 2))")\n$ '
    export PS2="|   "
elif [[ $(uname) == "Darwin" ]]; then 
    export OS_ICON=ÔåÇ #f302
    lps1_start='$(ps1_start "77;77;77" "33;33;255" "77;77;77" "\t")'
    lps1_jobs='$(ps1_jobs "77;77;77" "77;77;77" "33;33;255" "ÔÉ§  \j")'
    lps1_mid='$(ps1_beforelast "33;33;255" "77;77;77" "255;0;0"  "Óóæ \w")'
    lps1_git='$(ps1_git "33;33;255" "77;77;77" "77;77;77" "$(echo $(git branch 2>/dev/null | grep '^*' | colrm 1 2))")\n$ '
    export PS1=${lps1_start}${lps1_jobs}${lps1_mid}${lps1_git}
    export PS2="|   "
else 
    export OS_ICON=ÔåÉ #f303
    # %s+\v\\u([a-f0-9]{4})+\=''.nr2char(str2nr(submatch(1),16)).''+gc
    # Ôåï  #f315
    # ÔÖº  #f17c
    # Ôêò  #f418
    # Ôáì  #f1d3
    # Óúà  #e708
    # ÓòÆ  #e62e
    # Óû∞  #e7b0

    # Óóæ  #e5fe
    # ÔÉ§  #f0e4
    # ÔÜÖ  #f185
    # ÔÜ∂  #f1d0
    # Ôáê  #f1d0
    # ÓäÜ  #e286

    # ÓÇ∞  #e0b0
    # ÓÇ±  #e0b1  
    # ÓÇ≤  #e0b2
    # ÓÇ≤  #e0b2
    # ÓÇ≥  #e0b3
    # ÓÇ¥  #e0b4
    # ÓÇµ  #e0b5
    # ÓÇ∂  #e0b6
    # ÓÇ∑  #e0b7
    # ÓÇ∏  #e0b8
    # ÓÇπ  #e0b9
    # ÓÇ∫  #e0ba
    # ÓÇª  #e0bb
    # ÓÇº  #e0bc
    # ÓÇΩ  #e0bd
    # ÓÇæ  #e0be
    # ÓÇø  #e0bf
    # ÓÉÄ  #e0c0
    # ÓÉÅ  #e0c1
    # ÓÉÇ  #e0c2
    # ÓÉÉ  #e0c3
    # ÓÉÑ  #e0c4
    # ÓÉÖ  #e0c5
    # ÓÉÜ  #e0c6
    # ÓÉá  #e0c7
    # ÓÉà  #e0c8
    # ÓÉä  #e0ca
    # ÓÉå  #e0cc
    # ÓÉç  #e0cd
    # ÓÉé  #e0ce
    # ÓÉè  #e0cf
    # ÓÉê  #e0d0
    # ÓÉë  #e0d1

    # ÓÉí  #e0d2

    # ÓÉî  #e0d4

    # üêß ‚ö° üê® üêº üëæ üíÄ üîò üí•
    export PS1='$(ps1_start "77;77;77" "33;33;255" "77;77;77" "$OS_ICON \t")$(ps1_jobs "77;77;77" "77;77;77" "33;33;255" "üèÉ \j")$(ps1_beforelast "33;33;255" "77;77;77" "255;0;0"  "\w")$(ps1_git "33;33;255" "77;77;77" "77;77;77" "$(echo $(git branch 2>/dev/null | grep '^*' | colrm 1 2))")\n$ '
    export PS2="|   "
fi
